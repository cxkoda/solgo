syntax = "proto3";

package proof.spawner;
option go_package = "github.com/cxkoda/solgo/go/spawner/proto";

import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";

// A SpawnerService spawns and kills "processes". A "process" may be anything
// capable of being started and stopped, not just a true OS process; e.g.
// Docker images.
service SpawnerService {
  // Spawn spawns the "process" described in the request. The returned
  // KillRequest MUST be passed to Kill() to free resources when no longer
  // needed.
  rpc Spawn(SpawnRequest) returns (SpawnResponse);
  // Kill kills the "process" described in the request, which MUST be propagated
  // from the SpawnResponse.
  rpc Kill(KillRequest) returns (google.protobuf.Empty);
}

message SpawnRequest {
  oneof process {
    option (validate.required) = true;

    PostgresRequest postgres = 2;
  }

  reserved 1;
}

message SpawnResponse {
  oneof process {
    option (validate.required) = true;
    // <T>Requery and <T>Response fields have matching numbers because it may
    // prove useful. I (Arran) have occasionally regretted not matching field
    // numbers, but never regretted matching them.

    PostgresResponse postgres = 2;
  }

  // MUST be propagated to Kill() when the spawned "process" is no longer
  // required.
  KillRequest to_kill = 1 [ (validate.rules).message.required = true ];
}

// A KillRequest is generated by every successful call to Spawn(). A client MUST
// propagated this generated value; sending any other value has undefined
// behaviour.
message KillRequest {
  bytes proc_id = 1 [ (validate.rules).bytes.min_len = 1 ];
}

message PostgresRequest {
  // Tag to pull from the postgres Docker registry.
  string docker_tag = 1 [ (validate.rules).string.min_len = 1 ];

  // Length of time after which the image will be automatically killed.
  google.protobuf.Duration ttl = 2 [
    (validate.rules).duration.gt = {} // positive duration (ie > default 0)
  ];

  // Database name to create. Leave empty for default. The pattern is a stricter
  // version of
  // https://www.postgresql.org/docs/15/sql-syntax-lexical.html#SQL-SYNTAX-IDENTIFIERS
  string db_name = 3
      [ (validate.rules).string.pattern = "^([_a-z][_a-z0-9]*)?$" ];
}

message PostgresResponse {
  string dsn = 1 [ (validate.rules).string.pattern = "^postgres://" ];
  string user = 2 [ (validate.rules).string.min_len = 1 ];
  string password = 3 [ (validate.rules).string.min_len = 1 ];
  string host_and_port = 4 [ (validate.rules).string.min_len = 1];
  string host = 6;
  int64 port = 7;
  string db_name = 5 [ (validate.rules).string.min_len = 1 ];
}
